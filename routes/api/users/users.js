/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - email
 *         - password
 *         - verificationToken
 *       properties:
 *         _id:
 *           type: string
 *           description: User's ID generated by the database
 *         email:
 *           type: string
 *           description: Email address of the user
 *         password:
 *           type: string
 *           description: User's password
 *         username:
 *           type: string
 *           description: Username
 *         token:
 *           type: string
 *           description: Token generated once the user is logged-in
 *         verify:
 *           type: boolean
 *           description: Is the user verified?
 *         verificationToken:
 *           type: string
 *           description: Token generated for the purpose of the verification
 *         balance:
 *           type: number
 *           description: User's balance
 *
 *       example:
 *         _id: 64bfd99332de0ddca4aff25d
 *         email: matisiciarz@gmail.com
 *         username: Mati
 *         token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YzU3ZWJlMjhlYzczN2EzZTUxMzhkZSIsImlhdCI6MTY5MDgyMjA0MSwiZXhwIjoxNjkwOTA4NDQxfQ.3Uocm1qZZsEkKTtkhTeSaTzHaHhG-zplP_wespfVbvQ
 *         verify: true
 *         verificationToken: null
 *         balance: 1000
 *         password: $2a$06$4K61sSXMytigCJF.HOqf/.J3TNyosdqoX3Nrxbl3huGVPUMpA0Buu
 *         createdAt: 2023-07-25T14:17:55.340+00:00
 *         updatedAt: 2023-07-31T17:22:32.880+00:00
 *     CurrentUser:
 *       type: object
 *       required:
 *         - id
 *         - email
 *         - username
 *         - balance
 *       properties:
 *         _id:
 *           type: string
 *           description: User's ID generated by the database
 *         email:
 *           type: string
 *           description: Email address of the user
 *         password:
 *           type: string
 *           description: User's password
 *         username:
 *           type: string
 *           description: Username
 *         token:
 *           type: string
 *           description: Token generated once the user is logged-in
 *         verify:
 *           type: boolean
 *           description: Is the user verified?
 *         verificationToken:
 *           type: string
 *           description: Token generated for the purpose of the verification
 *         balance:
 *           type: number
 *           description: User's balance
 *
 *       example:
 *         _id: 64bfd99332de0ddca4aff25d
 *         email: matisiciarz@gmail.com
 *         username: Mati
 *         balance: 1000
 */

/**
 * @swagger
 * tags:
 * - name: User
 *   description: The users managing API
 * - name: Transactions
 *   description: The transactions managing API
 * - name: Summary
 *   description: The summary managing API
 * paths:
 *   /users/current:
 *    get:
 *     tags:
 *       - User
 *     summary: Shows current user
 *     content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *         application/xml:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *         application/x-www-form-urlencoded:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     required: true
 *    responses:
 *     '200':
 *         description: User data
 *
 * /users/auth/register:
 *   post:
 *     summary: Register new user
 *     tags: [User]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     responses:
 *       201:
 *         description: Registration successful! Verification e-mail has just been sent, please verify your e-mail.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       500:
 *         description: Some server error
 * /books/{id}:
 *   get:
 *     summary: Get the book by id
 *     tags: [Books]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The book id
 *     responses:
 *       200:
 *         description: The book response by id
 *         contens:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Book'
 *       404:
 *         description: The book was not found
 *   put:
 *    summary: Update the book by the id
 *    tags: [Books]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The book id
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: '#/components/schemas/Book'
 *    responses:
 *      200:
 *        description: The book was updated
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Book'
 *      404:
 *        description: The book was not found
 *      500:
 *        description: Some error happened
 *   delete:
 *     summary: Remove the book by id
 *     tags: [Books]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The book id
 *
 *     responses:
 *       200:
 *         description: The book was deleted
 *       404:
 *         description: The book was not found
 */

import express from "express";
export const usersRouter = express.Router();
import {
  registration,
  login,
  logout,
  verifyEmail,
  secondVerifyEmail,
  auth,
} from "../../../controllers/authOperations.js";
import { currentUser } from "../../../controllers/usersOperations.js";

usersRouter.get("/current", auth, currentUser);

usersRouter.post("/auth/register", registration);

usersRouter.get("/verify/:verificationToken", verifyEmail);

usersRouter.post("/verify/", secondVerifyEmail);

usersRouter.post("/auth/login", login);

usersRouter.post("/auth/logout", auth, logout);
